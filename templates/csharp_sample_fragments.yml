constant:
  value_print: <%= value.sub(/\b10\^/, '(int)1e').sub(/\b2\^/, '1<<').gsub(',', '_') %>
  max: const int <%= name.upcase %>_MAX = <%= value_print %>;
  mod: const int MOD = <%= value_print %>;
declaration:
  read: Console.ReadLine()<% delims.each do |d| %>.Replace('<%= d %>', ' ')<% end %>
  multiplicity: |
    <%
      case container
      when :single, :varray
        if vs.size > 1 && item != :char
          %>multi<%
        else
          %>single<%
        end
      when :harray, :matrix
        if item != :char
          %>multi<%
        else
          %>single<%
        end
      else
        %>multi<%
      end
    -%>
  input:
    __key: [item, multiplicity]
    number:
      single: int.Parse(<%= read %>)
      multi: <%= read %>.Split().Select(int.Parse).ToArray()
    decimal:
      single: double.Parse(<%= read %>)
      multi: <%= read %>.Split().Select(double.Parse).ToArray()
    string:
      single: <%= read %>
      multi: <%= read %>.Split()
    char:
      single: <%= read %>
      multi: <%= read %>.Split()
  decl_type: |
    <%
      case container
      when :single
        if vs.size > 1 %>single_n<% else %>single_1<% end
      when :varray
        if vs.size > 1 %>varray_n<% else %>varray_1<% end
      when :varray_matrix
        if item == :char %>varray_matrix_1<% else %>varray_matrix_2<% end
      else
        %><%= container.to_s %><%
      end
    -%>
  type_name:
    __key: [item]
    number: int
    decimal: double
    string: string
    char: string
  dim_type: '<%= size.size - (item == :char ? 1 : 0) %>_dim'
  type_dim:
    __key: [dim_type]
    0_dim: ''
    1_dim: '[]'
    2_dim: '[][]'
  type: <%= type_name %><%= type_dim %>
  line_buf: <%= vs.join() %>
  arr_cnt: <%= vs.size - 1 %>
  main:
    __key: [decl_type]
    single_1: <%= type %> <%= v %> = <%= input %>;
    single_n: |
      <%= type_name %>[] <%= line_buf %> = <%= input %>;
      <% vs.each.with_index do |v, k| -%>
      <%= type %> <%= v %> = <%= line_buf %>[<%= k %>];
      <% end -%>
    harray: <%= type %> <%= v %> = <%= input %>;
    varray_1: <%= type %> <%= v %> = Enumerable.Range(0, <%= sz %>).Select(_ => <%= input %>).ToArray();
    varray_n: |
      <% vs.each do |v| -%>
      <%= type %> <%= v %> = new <%= type_name %>[<%= sz %>];
      <% end -%>
      for (int i = 0; i < <%= sz %>; i++)
      {
          <%= type_name %>[] <%= line_buf %> = <%= input %>;
      <% vs.each.with_index do |v, k| -%>
          <%= v %>[i] = <%= line_buf %>[<%= k %>];
      <% end -%>
      }
    matrix: |
      <%= type %> <%= v %> = Enumerable.Range(0, <%= sz %>).Select(_ =>
          <%= input %>
      ).ToArray();
    varray_matrix_1: |
      <% vs[0..-2].each do |v| -%>
      <%= type_name %>[] <%= v %> = new <%= type_name %>[<%= sz %>];
      <% end -%>
      <%= type_name %>[] <%= vs[-1] %> = new <%= type_name %>[<%= sz %>];
      for (int i = 0; i < <%= sz %>; i++)
      {
          <%= type_name %>[] <%= line_buf %> = <%= input %>;
      <% vs[0..-2].each.with_index do |v, k| -%>
          <%= v %>[i] = <%= line_buf %>[<%= k %>];
      <% end -%>
          <%= vs[-1] %>[i] = <%= line_buf %>.Last();
      }
    varray_matrix_2: |
      <% vs[0..-2].each do |v| -%>
      <%= type_name %>[] <%= v %> = new <%= type_name %>[<%= sz %>];
      <% end -%>
      <%= type_name %>[][] <%= vs[-1] %> = new <%= type_name %>[<%= sz %>][];
      for (int i = 0; i < <%= sz %>; i++)
      {
          <%= type_name %>[] <%= line_buf %> = <%= input %>;
      <% vs[0..-2].each.with_index do |v, k| -%>
          <%= v %>[i] = <%= line_buf %>[<%= k %>];
      <% end -%>
          <%= vs[-1] %>[i] = <%= line_buf %>.Skip(<%= arr_cnt %>).ToArray();
      }
    matrix_varray: |
      <%= type_name %>[][] <%= vs[0] %> = new <%= type_name %>[<%= sz %>][];
      <% vs[1..].each do |v| -%>
      <%= type_name %>[] <%= v %> = new <%= type_name %>[<%= sz %>];
      <% end -%>
      for (int i = 0; i < <%= sz %>; i++)
      {
          <%= type_name %>[] <%= line_buf %> = <%= input %>;
          <%= vs[0] %>[i] = <%= line_buf %>.Take(<%= line_buf %>.Count - <%= arr_cnt %>).ToArray();
      <% vs[1..].each.with_index do |v, k| -%>
          <%= v %>[i] = <%= line_buf %>[<%= line_buf %>.Count - <%= arr_cnt.to_i - k %>];
      <% end -%>
      }
    vmatrix: |
      <% vs.each do |v| -%>
      <%= type %> <%= v %> = new <%= type_name %>[<%= sz1 %>][<%= sz2 %>];
      <% end -%>
      for (int i = 0; i < <%= sz1 %>; i++)
      {
          for (int j = 0; j < <%= sz2 %>; j++)
          {
              <%= type_name %>[] <%= line_buf %> = <%= input %>;
      <% vs.each.with_index do |v, k| -%>
              <%= v %>[i][j] = <%= line_buf %>[<%= k %>];
      <% end -%>
          }
      }
    hmatrix: |
      <% vs.each do |v| -%>
      <%= type %> <%= v %> = new <%= type_name %>[<%= sz1 %>][<%= sz2 %>];
      <% end -%>
      for (int i = 0; i < <%= sz1 %>; i++)
      {
          <%= type_name %>[] <%= line_buf %> = <%= input %>;
          for (int j = 0; j < <%= sz2 %>; j++)
          {
      <% vs.each.with_index do |v, k| -%>
              <%= v %>[i][j] = <%= line_buf %>[j * <%= vs.size %> + <%= k %>];
      <% end -%>
          }
      }
