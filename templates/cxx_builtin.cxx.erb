// <%= pbm.url %>

#include <cstdio>
<% if pbm.options.interactive -%>
#include <vector>
#include <string>
<% end -%>

using namespace std;

<% if pbm.options.interactive -%>
#define DEBUG
<% end -%>
#define REP(i,n)   for(int i=0; i<(int)(n); i++)
#define FOR(i,b,e) for(int i=(b); i<=(int)(e); i++)

<% if pbm.options.interactive -%>
//------------------------------------------------------------------------------
const int BUFSIZE = 1024;
char req[BUFSIZE];
char res[BUFSIZE];
#ifdef DEBUG
char source[BUFSIZE];
vector<string> responses;
#endif

void query() {
  printf("? %s\n", req);
  fflush(stdout);
#ifdef DEBUG
  sprintf(res, "generate response from source");
  responses.push_back(res);
#else
  scanf("%s", res);
#endif
}

//------------------------------------------------------------------------------
<% end -%>
<% gen_consts.each do |line| -%>
<%= line %>
<% end -%>

<% gen_decls.each do |line| -%>
<%= line %>
<% end -%>

void solve() {
<% if pbm.options.interactive -%>
  printf("! %s\n", ans);
  fflush(stdout);
#ifdef DEBUG
  printf("query count: %d\n", responses.size());
  puts("query results:");
  REP(i, responses.size()) {
    puts(responses[i].c_str());
  }
#endif
<% elsif (vs = pbm.options.binary_values) -%>
  bool cond = false;
  puts(cond ? "<%= vs[0] %>" : "<%= vs[1] %>");
<% else -%>
  int ans = 0;
  printf("%d\n", ans);
<% end -%>
}

void input() {
<% gen_inputs.each do |line| -%>
  <%= line %>
<% end -%>
<% if pbm.options.interactive -%>
#ifdef DEBUG
  scanf("%s", source);
#endif
<% end -%>
}

int main() {
  input();
  solve();
  return 0;
}
